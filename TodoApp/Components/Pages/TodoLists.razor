@page "/todo-lists"
@using System.Diagnostics
@using TodoApp.Clock
@using TodoApp.Enums
@using TodoApp.Models
@using TodoApp.Repositories
@inject IUserRepository userRepository
@inject ITodoItemRepository todoItemRepository
@inject IClockInterface clock
@rendermode InteractiveServer


<div class="container mt-5">
    <h3>Lista zadań na:</h3>
    <div class="form-group">
        <label for="taskDropdown" class="form-label">Wybierz zakres:</label>
        <select id="taskDropdown" class="form-select mb-3" @bind="selectedRange">
            <option value="@TodoListRange.Day">Dzień</option>
            <option value="@TodoListRange.ThisWeek">Ten tydzień</option>
            <option value="@TodoListRange.ThisMonth">Ten miesiąc</option>
            <option value="@TodoListRange.DateRange">Przedział</option>
        </select>
    </div>

    @switch (selectedRange)
    {
        case TodoListRange.Day:
            <div class="mt-3">
                <p>Wybierz dzień</p>
                <InputDate class="form-control custom-date-input" @bind-Value="dateRangeStart" @oninput="UpdateTodoItems" id="todoDate"></InputDate>
            </div>
            break;
        case TodoListRange.ThisWeek:
            <div class="mt-3">
                <p>Wybrano: Ten tydzień</p>
            </div>
            break;
        case TodoListRange.ThisMonth:
            <div class="mt-3">
                <p>Wybrano: Ten miesiąc</p>
            </div>
            break;
        case TodoListRange.DateRange:
            <div class="mt-3">
                <p>Od: </p>
                <InputDate class="form-control custom-date-input" @bind-Value="dateRangeStart" id="startDate" @oninput="UpdateTodoItems"></InputDate>
                <p>Do: </p>
                <InputDate class="form-control custom-date-input mt-2" @bind-Value="dateRangeEnd" id="endDate" @oninput="UpdateTodoItems"></InputDate>
            </div>
            break;
    }

    @foreach (var todo in todoItems)
    {
        <EditForm Model="@todo" FormName="@($"todoForm-{todo.Id}")" class="mt-4">
            <li class="list-group-item d-flex justify-content-between align-items-center mb-3">
                <div class="d-flex align-items-center">
                    <InputCheckbox class="form-check-input me-3 ms-3" ValueExpression="() => todo.IsDone" ValueChanged="() => ToggleTodoStatus(todo)"></InputCheckbox>
                    <div class="flex-grow-1 ms-3 @((todo.IsDone ? "text-danger text-decoration-line-through" : "text-black"))">
                        @todo.Content
                    </div>
                </div>
                <button type="button" @onclick="() => DeleteTodo(todo)" class="btn btn-primary">Usuń</button>
            </li>
        </EditForm>
    }


</div>

@code {

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    private AuthenticationState authenticationState { get; set; } = null!;

    private List<TodoItem> todoItems { get; set; } = new();
    private TodoListRange selectedRange = TodoListRange.Day;
    private DateOnly dateRangeStart = DateOnly.FromDateTime(DateTime.Now);
    private DateOnly dateRangeEnd = DateOnly.FromDateTime(DateTime.Now.AddDays(7));

    private User? User { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        authenticationState = await authenticationStateTask;
        User = userRepository.FindByEmail(authenticationState.User.Identity.Name);
        todoItems = todoItemRepository.GetAllUserTodosForSpan(
            User.Id,
            clock.GetToday(),
            clock.GetToday()
        ).ToList();
    }

    private void ToggleTodoStatus(TodoItem todo)
    {
        todo.IsDone = !todo.IsDone;
        Console.WriteLine(todo.IsDone);
        todoItemRepository.Modify(todo);
    }

    private void DeleteTodo(TodoItem todo)
    {
        todoItemRepository.Delete(todo);
        todoItems.Remove(todo);
    }

    private void UpdateTodoItems()
    {
        Debug.WriteLine("Updating Todo Items");
        DateOnly start = dateRangeStart;
        DateOnly end = dateRangeEnd;

        switch (selectedRange)
        {
            case TodoListRange.Day:
                start = dateRangeStart;
                end = dateRangeStart;
                break;
            case TodoListRange.ThisWeek:
                start = clock.GetWeekStart();
                end = clock.GetWeekEnd();
                break;
            case TodoListRange.ThisMonth:
                start = clock.GetMonthStart();
                end = clock.GetMonthEnd();
                break;
            case TodoListRange.DateRange:
                start = dateRangeStart;
                end = dateRangeEnd;
                break;
        }

        if (start > end)
        {
            end = start;
            dateRangeEnd = dateRangeStart;
        }

        todoItems = todoItemRepository.GetAllUserTodosForSpan(
            User.Id,
            start,
            end
        ).ToList();

        StateHasChanged();
    }

}